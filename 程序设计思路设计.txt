多维背包问题在我的理解就是把0-1背包问题的维度进行提升，我们书本所学的回溯法既然可以解决0-1背包问题那么回溯法也应该可以解决多维背包问题，只是0-1背包问题是一个限制条件，而多维背包问题有很多限制条件，所以我们利用回溯法将0-1背包问题进行重复就能解决多维背包问题。
   但是第一步还是要把数据给读懂：
 （1）6 10 3800
 （2）100 600 1200 2400 500 2000
 （3）8 12 13 64 22 41
 （4）8 12 13 75 22 41
 （5）3 6 4 18 6 4
 （6）5 10 8 32 6 12
 （7）5 13 8 42 6 20
 （8）5 13 8 48 6 20
 （9）0 0 0 0 8 0
 （10）3 0 4 0 8 0
 （11）3 2 4 0 8 4
 （12）3 2 4 8 8 4
 （13）80 96 20 36 44 48 10 18 22 24
就像这一组数据，第一行的6表示有6个商品。10表示这六商品有10个属性，（例如：大小、长度、体积等）。3800表示满足全部约束条件的商品的最大价值为3800。第二行的六个数据分别是六个商品的价格。第三行到第十二行为这六个商品的十个属性。第十三行的十个数据分别是十个属性中每一个属性的约束条件。
程序设计思路就是先定义一个列表把从键盘输入商品数据先存储起来分别设计输入物品个数、约束条件个数、物品价值进行存储，再把输入的物品价值进行分割，再把物品的价值、约束值和属性值添加到列表中，再将列表中的数据全部转化为float型数据，再将列表List中物品的属性值切割出来赋另一个列表L1，将列表List中各属性的约束值切割出来赋给另一个列表con_max，计算当前装入的物品的属性之和，再设计存储符合各个约束条件的组合，利用回溯法找出满足约束条件的物品放入组合，再判断是否遍历完所有的物品，将物品的放入组合添加到列表temp中，满足条件，继续探索节点，回溯上一层，若不满足约束，不放入，继续探索节点，直到执行回溯法找到所有符合约束的物品放入组合，用com=[]存储满足所有约束的组合,用v=[]存储组合的物品总价值，再利用for循环找满足各个约束的组合中寻找满足所有约束的组合，再利用for循环计算满足所有约束条件的物品放入组合的总价值，最后求出最大的总价值并输出。
